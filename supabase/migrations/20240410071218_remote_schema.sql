
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";

COMMENT ON SCHEMA "public" IS 'standard public schema';

CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";

CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";

SET default_tablespace = '';

SET default_table_access_method = "heap";

CREATE TABLE IF NOT EXISTS "public"."student_info" (
    "student_id" "text" NOT NULL,
    "student_name" "text",
    "joinDate" timestamp without time zone,
    "studentStatus" "text" DEFAULT 'active'::"text",
    "photo" "text",
    "totalAmount" double precision,
    "teamId" "uuid",
    "related_images" "text"[]
);

ALTER TABLE "public"."student_info" OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."search_student"("public"."student_info") RETURNS "text"
    LANGUAGE "sql" IMMUTABLE
    AS $_$select $1.student_id || ' ' || $1.student_name;$_$;

ALTER FUNCTION "public"."search_student"("public"."student_info") OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."account_role" (
    "id" smallint NOT NULL,
    "name" "text" NOT NULL,
    "label" "text",
    "allowSignUp" boolean
);

ALTER TABLE "public"."account_role" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."comment" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "comments" "jsonb"[],
    "dateCreated" timestamp without time zone,
    "userId" "text"
);

ALTER TABLE "public"."comment" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."shortcut" (
    "id" smallint NOT NULL,
    "key" "text",
    "label" "text",
    "enable" boolean DEFAULT false
);

ALTER TABLE "public"."shortcut" OWNER TO "postgres";

ALTER TABLE "public"."shortcut" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."group_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."stop_study_promotion" (
    "student_id" "text" NOT NULL,
    "stopFrom" "text" NOT NULL,
    "dateCreated" timestamp without time zone,
    "dateApproved" "date",
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "createdBy" "uuid",
    "status" "text" DEFAULT 'processing'::"text",
    "commentId" "uuid",
    "reason" "text",
    "confirmedBy" "jsonb"[] DEFAULT '{}'::"jsonb"[] NOT NULL
);

ALTER TABLE "public"."stop_study_promotion" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."stop_study_promotion_status" (
    "label" "text",
    "key" "text" NOT NULL
);

ALTER TABLE "public"."stop_study_promotion_status" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."student_manage_permission" (
    "userId" "uuid" NOT NULL,
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "allowRead" "text"[],
    "allowWrite" "text"[],
    "teamId" "uuid"
);

ALTER TABLE "public"."student_manage_permission" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."student_status" (
    "key" "text" NOT NULL
);

ALTER TABLE "public"."student_status" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."study_promotion_team" (
    "label" "text",
    "key" "text",
    "address" "text",
    "nameOfFather" "text",
    "linkFanPageStudyPromotion" "text",
    "linkFanPageProject" "text",
    "dateCreated" timestamp without time zone,
    "communityHead2" "text",
    "communityHead1" "text",
    "financialManager" "text",
    "studyPromotionHead" "text",
    "projectHead" "text",
    "supportManager1" "text",
    "supportManager2" "text",
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL
);

ALTER TABLE "public"."study_promotion_team" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."study_promotion_team_info" (
    "teamName" "text",
    "teamCode" "text",
    "teamProjectName" "text",
    "teamLinkFanpage" "text",
    "teamLinkInfor" "text",
    "teamMember" "text"[],
    "teamId" "uuid" NOT NULL
);

ALTER TABLE "public"."study_promotion_team_info" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."subject" (
    "label" "text" NOT NULL,
    "key" "text" NOT NULL,
    "grade_available" smallint[]
);

ALTER TABLE "public"."subject" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."transcript_detail" (
    "transcriptDetailId" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "reviewedBy" "text",
    "grantAmount" double precision,
    "bonusAmount" double precision,
    "bonusDate" timestamp without time zone,
    "attachments" "jsonb"[],
    "scores" "jsonb"[],
    "numberOfCommunityActivities" integer,
    "totalNumberOfCommunityActivities" integer,
    "commentId" "uuid",
    "createdBy" "text",
    "seedSoul" "text"
);

ALTER TABLE "public"."transcript_detail" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."transcript_overview" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "student_id" "text",
    "transcriptDetailId" "uuid",
    "transcriptStatus" "text" DEFAULT 'not_considered'::"text",
    "schoolYear" "text",
    "grantDate" timestamp without time zone,
    "teamId" "uuid",
    "semester" smallint,
    "class" smallint,
    "grade" smallint,
    "admin_approved" boolean DEFAULT false,
    "confirmedBy" "jsonb"[] DEFAULT '{}'::"jsonb"[],
    "next_transcript" "uuid",
    "previous_transcript" "uuid",
    "is_head_transcript" boolean DEFAULT false,
    "is_last_transcript" boolean
);

ALTER TABLE "public"."transcript_overview" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."transcript_status" (
    "key" "text" NOT NULL
);

ALTER TABLE "public"."transcript_status" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."user_info" (
    "userId" "uuid" NOT NULL,
    "phone" "text",
    "address" "text",
    "facebookUrl" "text",
    "personalEmail" "text",
    "communityEmail" "text",
    "religion" "text",
    "email" "text" NOT NULL,
    "roleId" smallint,
    "communityName" "text",
    "communityPosition" "text"
);

ALTER TABLE "public"."user_info" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."user_info_public" (
    "userId" "uuid" NOT NULL,
    "userName" "text",
    "photoUrl" "text"
);

ALTER TABLE "public"."user_info_public" OWNER TO "postgres";

ALTER TABLE "public"."account_role" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."user_role_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."user_shortcut" (
    "userId" "uuid" NOT NULL,
    "shortcutIds" smallint[] NOT NULL
);

ALTER TABLE "public"."user_shortcut" OWNER TO "postgres";

ALTER TABLE ONLY "public"."stop_study_promotion"
    ADD CONSTRAINT "consider_stop_study_promotion_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."shortcut"
    ADD CONSTRAINT "group_id_key" UNIQUE ("id");

ALTER TABLE ONLY "public"."shortcut"
    ADD CONSTRAINT "group_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."account_role"
    ADD CONSTRAINT "list_user_role_pkey" PRIMARY KEY ("id", "name");

ALTER TABLE ONLY "public"."stop_study_promotion_status"
    ADD CONSTRAINT "stop_study_promotion_status_pkey" PRIMARY KEY ("key");

ALTER TABLE ONLY "public"."student_info"
    ADD CONSTRAINT "student_info_pkey" PRIMARY KEY ("student_id");

ALTER TABLE ONLY "public"."student_status"
    ADD CONSTRAINT "student_status_pkey" PRIMARY KEY ("key");

ALTER TABLE ONLY "public"."student_manage_permission"
    ADD CONSTRAINT "study_promotion_manager_permission_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."study_promotion_team_info"
    ADD CONSTRAINT "study_promotion_team_info_pkey" PRIMARY KEY ("teamId");

ALTER TABLE ONLY "public"."study_promotion_team"
    ADD CONSTRAINT "study_promotion_team_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."subject"
    ADD CONSTRAINT "subject_pkey" PRIMARY KEY ("key");

ALTER TABLE ONLY "public"."comment"
    ADD CONSTRAINT "transcript_detail_note_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."transcript_detail"
    ADD CONSTRAINT "transcript_detail_pkey" PRIMARY KEY ("transcriptDetailId");

ALTER TABLE ONLY "public"."transcript_overview"
    ADD CONSTRAINT "transcript_overview_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."transcript_status"
    ADD CONSTRAINT "transcript_status_pkey" PRIMARY KEY ("key");

ALTER TABLE ONLY "public"."user_shortcut"
    ADD CONSTRAINT "user_group_pkey" PRIMARY KEY ("userId");

ALTER TABLE ONLY "public"."user_info_public"
    ADD CONSTRAINT "user_info_public_pkey" PRIMARY KEY ("userId");

ALTER TABLE ONLY "public"."user_info"
    ADD CONSTRAINT "user_pkey" PRIMARY KEY ("userId");

ALTER TABLE ONLY "public"."account_role"
    ADD CONSTRAINT "user_role_id_key" UNIQUE ("id");

ALTER TABLE ONLY "public"."student_info"
    ADD CONSTRAINT "public_student_info_teamId_fkey" FOREIGN KEY ("teamId") REFERENCES "public"."study_promotion_team"("id");

ALTER TABLE ONLY "public"."student_manage_permission"
    ADD CONSTRAINT "public_student_manage_permission_teamId_fkey" FOREIGN KEY ("teamId") REFERENCES "public"."study_promotion_team"("id");

ALTER TABLE ONLY "public"."transcript_overview"
    ADD CONSTRAINT "public_transcript_overview_teamId_fkey" FOREIGN KEY ("teamId") REFERENCES "public"."study_promotion_team"("id");

ALTER TABLE ONLY "public"."stop_study_promotion"
    ADD CONSTRAINT "stop_study_promotion_status_fkey" FOREIGN KEY ("status") REFERENCES "public"."stop_study_promotion_status"("key");

ALTER TABLE ONLY "public"."student_info"
    ADD CONSTRAINT "student_info_studentStatus_fkey" FOREIGN KEY ("studentStatus") REFERENCES "public"."student_status"("key");

ALTER TABLE ONLY "public"."transcript_overview"
    ADD CONSTRAINT "transcript_overview_transcriptStatus_fkey" FOREIGN KEY ("transcriptStatus") REFERENCES "public"."transcript_status"("key");

ALTER TABLE ONLY "public"."user_info"
    ADD CONSTRAINT "user_info_roleId_fkey" FOREIGN KEY ("roleId") REFERENCES "public"."account_role"("id");

ALTER TABLE "public"."account_role" ENABLE ROW LEVEL SECURITY;

CREATE POLICY "all" ON "public"."stop_study_promotion" USING (true) WITH CHECK (true);

CREATE POLICY "all" ON "public"."student_info" USING (true) WITH CHECK (true);

CREATE POLICY "all" ON "public"."student_manage_permission" USING (true) WITH CHECK (true);

CREATE POLICY "allow insert" ON "public"."study_promotion_team" FOR INSERT WITH CHECK (true);

CREATE POLICY "allow insert" ON "public"."user_shortcut" FOR INSERT WITH CHECK (true);

CREATE POLICY "allow read" ON "public"."account_role" FOR SELECT USING (true);

CREATE POLICY "allow read" ON "public"."comment" FOR SELECT TO "authenticated" USING (true);

CREATE POLICY "allow read" ON "public"."study_promotion_team" FOR SELECT USING (true);

CREATE POLICY "allow read" ON "public"."user_info" FOR SELECT USING (true);

CREATE POLICY "allow read" ON "public"."user_shortcut" FOR SELECT TO "authenticated" USING (true);

CREATE POLICY "allow update" ON "public"."comment" FOR UPDATE TO "authenticated" USING (true) WITH CHECK (true);

CREATE POLICY "allow update" ON "public"."study_promotion_team" FOR UPDATE USING (true) WITH CHECK (true);

CREATE POLICY "allow update" ON "public"."user_shortcut" FOR UPDATE TO "authenticated" USING (true) WITH CHECK (true);

CREATE POLICY "allow write" ON "public"."comment" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "allow write" ON "public"."user_info" FOR INSERT WITH CHECK (true);

ALTER TABLE "public"."comment" ENABLE ROW LEVEL SECURITY;

CREATE POLICY "deny write" ON "public"."account_role" FOR INSERT WITH CHECK (false);

CREATE POLICY "insert" ON "public"."transcript_detail" FOR INSERT WITH CHECK (true);

CREATE POLICY "insert" ON "public"."transcript_overview" FOR INSERT WITH CHECK (true);

CREATE POLICY "insert" ON "public"."user_info_public" FOR INSERT WITH CHECK (true);

CREATE POLICY "read only" ON "public"."student_status" FOR SELECT USING (true);

CREATE POLICY "select" ON "public"."subject" FOR SELECT USING (true);

CREATE POLICY "select" ON "public"."transcript_detail" FOR SELECT USING (true);

CREATE POLICY "select" ON "public"."transcript_overview" FOR SELECT USING (true);

CREATE POLICY "select" ON "public"."user_info_public" FOR SELECT TO "authenticated" USING (true);

ALTER TABLE "public"."shortcut" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."stop_study_promotion" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."stop_study_promotion_status" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."student_info" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."student_manage_permission" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."student_status" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."study_promotion_team" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."study_promotion_team_info" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."subject" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."transcript_detail" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."transcript_overview" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."transcript_status" ENABLE ROW LEVEL SECURITY;

CREATE POLICY "update" ON "public"."transcript_detail" FOR UPDATE USING (true) WITH CHECK (true);

CREATE POLICY "update" ON "public"."transcript_overview" FOR UPDATE USING (true) WITH CHECK (true);

CREATE POLICY "update" ON "public"."user_info_public" FOR UPDATE USING (true) WITH CHECK (true);

ALTER TABLE "public"."user_info" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."user_info_public" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."user_shortcut" ENABLE ROW LEVEL SECURITY;

ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";

GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

GRANT ALL ON TABLE "public"."student_info" TO "anon";
GRANT ALL ON TABLE "public"."student_info" TO "authenticated";
GRANT ALL ON TABLE "public"."student_info" TO "service_role";

GRANT ALL ON FUNCTION "public"."search_student"("public"."student_info") TO "anon";
GRANT ALL ON FUNCTION "public"."search_student"("public"."student_info") TO "authenticated";
GRANT ALL ON FUNCTION "public"."search_student"("public"."student_info") TO "service_role";

GRANT ALL ON TABLE "public"."account_role" TO "anon";
GRANT ALL ON TABLE "public"."account_role" TO "authenticated";
GRANT ALL ON TABLE "public"."account_role" TO "service_role";

GRANT ALL ON TABLE "public"."comment" TO "anon";
GRANT ALL ON TABLE "public"."comment" TO "authenticated";
GRANT ALL ON TABLE "public"."comment" TO "service_role";

GRANT ALL ON TABLE "public"."shortcut" TO "anon";
GRANT ALL ON TABLE "public"."shortcut" TO "authenticated";
GRANT ALL ON TABLE "public"."shortcut" TO "service_role";

GRANT ALL ON SEQUENCE "public"."group_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."group_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."group_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."stop_study_promotion" TO "anon";
GRANT ALL ON TABLE "public"."stop_study_promotion" TO "authenticated";
GRANT ALL ON TABLE "public"."stop_study_promotion" TO "service_role";

GRANT ALL ON TABLE "public"."stop_study_promotion_status" TO "anon";
GRANT ALL ON TABLE "public"."stop_study_promotion_status" TO "authenticated";
GRANT ALL ON TABLE "public"."stop_study_promotion_status" TO "service_role";

GRANT ALL ON TABLE "public"."student_manage_permission" TO "anon";
GRANT ALL ON TABLE "public"."student_manage_permission" TO "authenticated";
GRANT ALL ON TABLE "public"."student_manage_permission" TO "service_role";

GRANT ALL ON TABLE "public"."student_status" TO "anon";
GRANT ALL ON TABLE "public"."student_status" TO "authenticated";
GRANT ALL ON TABLE "public"."student_status" TO "service_role";

GRANT ALL ON TABLE "public"."study_promotion_team" TO "anon";
GRANT ALL ON TABLE "public"."study_promotion_team" TO "authenticated";
GRANT ALL ON TABLE "public"."study_promotion_team" TO "service_role";

GRANT ALL ON TABLE "public"."study_promotion_team_info" TO "anon";
GRANT ALL ON TABLE "public"."study_promotion_team_info" TO "authenticated";
GRANT ALL ON TABLE "public"."study_promotion_team_info" TO "service_role";

GRANT ALL ON TABLE "public"."subject" TO "anon";
GRANT ALL ON TABLE "public"."subject" TO "authenticated";
GRANT ALL ON TABLE "public"."subject" TO "service_role";

GRANT ALL ON TABLE "public"."transcript_detail" TO "anon";
GRANT ALL ON TABLE "public"."transcript_detail" TO "authenticated";
GRANT ALL ON TABLE "public"."transcript_detail" TO "service_role";

GRANT ALL ON TABLE "public"."transcript_overview" TO "anon";
GRANT ALL ON TABLE "public"."transcript_overview" TO "authenticated";
GRANT ALL ON TABLE "public"."transcript_overview" TO "service_role";

GRANT ALL ON TABLE "public"."transcript_status" TO "anon";
GRANT ALL ON TABLE "public"."transcript_status" TO "authenticated";
GRANT ALL ON TABLE "public"."transcript_status" TO "service_role";

GRANT ALL ON TABLE "public"."user_info" TO "anon";
GRANT ALL ON TABLE "public"."user_info" TO "authenticated";
GRANT ALL ON TABLE "public"."user_info" TO "service_role";

GRANT ALL ON TABLE "public"."user_info_public" TO "anon";
GRANT ALL ON TABLE "public"."user_info_public" TO "authenticated";
GRANT ALL ON TABLE "public"."user_info_public" TO "service_role";

GRANT ALL ON SEQUENCE "public"."user_role_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."user_role_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."user_role_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."user_shortcut" TO "anon";
GRANT ALL ON TABLE "public"."user_shortcut" TO "authenticated";
GRANT ALL ON TABLE "public"."user_shortcut" TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";

RESET ALL;
